#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import subprocess
import sys
import yaml


def call_step_orchestrator(method):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-RPC –∑–∞–ø—Ä–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç."""
    req = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": method
    }
    try:
        proc = subprocess.run(
            ["python3", "step_orchestrator.py"],
            input=json.dumps(req) + "\n",
            capture_output=True,
            text=True,
            timeout=5
        )
        if proc.returncode != 0:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {method}: {proc.stderr.strip()}")
            return None
        response = json.loads(proc.stdout.strip())
        return response
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–∞ {method}: {e}")
        return None


def test_steps():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ steps.yaml ...")
    with open("steps.yaml", "r", encoding="utf-8") as f:
        data = yaml.safe_load(f)

    stages = data.get("stages", [])
    steps = [step for s in stages for step in s.get("steps", [])]
    assert len(steps) > 0, "steps.yaml –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–≥–æ–≤"
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(steps)} —à–∞–≥–æ–≤")

    first_step = steps[0]

    print("\nüß© –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ step_orchestrator ...")
    for i, step in enumerate(steps):
        resp = call_step_orchestrator("get_next_step")
        assert resp and "result" in resp, f"‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è get_next_step –Ω–∞ —à–∞–≥–µ {i+1}"
        current = resp["result"]["step"]
        assert current == step, f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å '{step}', –ø–æ–ª—É—á–µ–Ω–æ '{current}'"
        print(f"‚úì –®–∞–≥ {i+1}: {current}")
        call_step_orchestrator("mark_step_complete")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞
    resp = call_step_orchestrator("get_next_step")
    assert resp["result"]["step"] is None, "‚ùå –ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞ step –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null"
    print("\nüéâ –í—Å–µ —à–∞–≥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

    # üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±—Ä–æ—Å–∞
    print("\nüîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ reset_steps (—Å–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—É)...")
    resp_reset = call_step_orchestrator("reset_steps")
    assert resp_reset and "result" in resp_reset, "‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç reset_steps"
    status = resp_reset["result"].get("status")
    assert status == "ok", f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 'ok' –æ—Ç reset_steps, –ø–æ–ª—É—á–µ–Ω–æ '{status}'"
    print("‚úì –°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: ok")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–µ—Ä–≤—ã–π —à–∞–≥
    resp2 = call_step_orchestrator("get_next_step")
    assert resp2 and "result" in resp2, "‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ reset_steps"
    current2 = resp2["result"]["step"]
    assert current2 == first_step, f"‚ùå –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –æ–∂–∏–¥–∞–ª—Å—è –ø–µ—Ä–≤—ã–π —à–∞–≥ '{first_step}', –ø–æ–ª—É—á–µ–Ω–æ '{current2}'"
    print(f"‚úÖ –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å–Ω–æ–≤–∞: {current2}")


if __name__ == "__main__":
    try:
        test_steps()
    except AssertionError as e:
        print(e)
        sys.exit(1)
